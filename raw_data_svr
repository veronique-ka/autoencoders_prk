import timeit
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from statistics import median

# Set start time
start_time = timeit.default_timer()

# Load data
prk = pd.read_csv('C:\\Users\\veron\\Documents\\UNIVERSITY\\3 SEMESTER\\PYTHON\\AE\\prk_reord_bin.csv')

#Convert pandas dataframe to numpay array
p=np.array(prk)

# Initiate lists of metrics, based on 30 iterations (trials)
MSE_test_30 = list()
R2_test_30 = list()
MAE_test_30 =list()

for i in range(0,30):
    #split into train and test
    split = train_test_split(p, test_size=0.3)
    train=split[0]
    test=split[1]
    x_train=train[:,1:20]
    y_train=train[:,20]
    x_test=test[:,1:20]
    y_test=test[:,20]
    
    #Standardize features by removing the mean and scaling to unit variance
    scale = StandardScaler()
    x_train = scale.fit_transform(x_train)
    x_test = scale.fit_transform(x_test)
    
    # Support vector regression model
    sv = SVR(kernel=’rbf’, degree=3, gamma=’auto’, coef0=0.0, tol=0.001, C=1.0, epsilon=0.1, shrinking=True, cache_size=200, verbose=False, max_iter=-1)
    sv.fit(x_train, y_train)
    test_predictions = sv.predict(x_test)
    
    # Calculate Mean squarred error and append result in 30-dim array   
    MSE_test_30.append(mean_squared_error(y_test, test_predictions))
    print("MSE_test =", MSE_test_30)
    
    # Calculate R2 and append result in 30-dim array   
    R2_test_30.append(r2_score(y_test, test_predictions))
    
    # Calculate Mean absolute error
    MAE_test_30.append(mean_absolute_error(y_test,test_predictions))
    print("MAE=", MAE_test_30)

#Calculate median of 300 trials
MSE_final=median(MSE_test_30)
R2_final=median(R2_test_30)
MAE_final=median(MAE_test_30)
print("MSE_final=", MSE_final)
print("R2_final=", R2_final)
print("MAE_final=", MAE_final)

#Set end time to calculate total time of code running
end_time = timeit.default_timer()
hours, rem = divmod(end_time-start_time, 3600)
minutes, seconds = divmod(rem, 60)
print ("{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds))
    
