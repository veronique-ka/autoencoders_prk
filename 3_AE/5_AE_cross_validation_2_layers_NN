import timeit
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split, StratifiedKFold
from keras.layers import Input, Dense
from keras.models import Model
from keras.models import Sequential
from keras.optimizers import SGD
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from statistics import median

# Set start time
start_time = timeit.default_timer()

# Load data
prk = pd.read_csv("https://raw.githubusercontent.com/veronique-ka/autoencoders_prk/master/prk_reord_bin.csv")

#Convert pandas dataframe to numpay array
p=np.array(prk)

x=p[:,1:20]
y=p[:,20]
        
# Normalize values between 0 and 1
min_max=MinMaxScaler()
x=min_max.fit_transform(x)

# Initiate lists of metrics for test-set, based on 5 iterations
MSE_test_5 = list()
R2_test_5 = list()
MAE_test_5 = list()

# Initiate 5 itereations for K-folds partitions
for i in range(0,5):
    print("Iteration number",i)
    
    #Vanilla AE (1 hidden layer)

    # Set the code size of the encoded representation  
    encoding_dim=3
    
    # Input placeholder
    input_sample = Input(shape=(19,))
    # Define AE architecture
    encoded = Dense(3, activation='sigmoid')(input_sample)
    decoded = Dense(19, activation='sigmoid')(encoded)
    autoencoder = Model(input_sample, decoded)
    # Return architecture of AE
    autoencoder.summary()
    
    # Compile autoencoder
    autoencoder.compile(optimizer='adam', loss='binary_crossentropy')
    
    # Train AE to reconstruct
    autoencoder.fit(x, x,
                    epochs=200,
                    batch_size=64,
                    shuffle=True)
                    
    # Get a separate model of Encoder
    encoder = Model(input_sample, encoded)
        
    # Get a code or encoded representation
    encoded = encoder.predict(x)
    
    # Define k-fold validation splits
    def load_data_kfold(k):                  

        folds = list(StratifiedKFold(n_splits=k, shuffle=True).split(encoded, y))
        
        return folds, encoded, y
    
    k = 10
    folds, encoded_train, y_train = load_data_kfold(k)
    
    # 2 layers 20-5 NN model
    def get_model():
        
        model=Sequential()
        model.add(Dense(20,input_dim=3,activation="sigmoid"))
        model.add(Dense(5, activation="sigmoid"))
        model.add(Dense(1,init='normal', activation="linear"))
        model.compile(loss='mse', optimizer='sgd')
         
        return model
    
    model = get_model()
    
    # initiate lists of metrics based on individual fold's metrics
    MSE_valid_folds = list()
    R2_valid_folds = list()
    MAE_valid_folds = list()
        
    # initiate partitions into train and validation subsets
    for j, (train_idx, val_idx) in enumerate(folds):
            
            print('\nFold ',j)
            encoded_train_cv = encoded[train_idx]
            y_train_cv = y[train_idx]
            encoded_valid_cv = encoded[val_idx]
            y_valid_cv= y[val_idx]            
            
            model = get_model()
            model.fit(encoded_train_cv, y_train_cv, 
                        batch_size=64, 
                        nb_epoch=200, 
                        verbose=1,
                        shuffle=True,
                        validation_data = (encoded_valid_cv, y_valid_cv))
                        
            # Predict values for each k-validation subset
            valid_predictions=model.predict(encoded_valid_cv)
            
            # Calculate metrics for each fold and append them to 10-dim array (10 folds)
            MSE_valid_folds.append(mean_squared_error(y_valid_cv, valid_predictions))
            R2_valid_folds.append(r2_score(y_valid_cv, valid_predictions))
            MAE_valid_folds.append(mean_absolute_error(y_valid_cv,valid_predictions))
            
    print("MSE_valid =", MSE_valid_folds)
    print("R2_valid=", R2_valid_folds) 
    print("MAE_valid=", MAE_valid_folds)
    
    # Calculate median-average of metrics from 10 folds and append to 5-dim array (5 trials)
    MSE_test_5.append(median(MSE_valid_folds))
    R2_test_5.append(median(R2_valid_folds))
    MAE_test_5.append(median(MAE_valid_folds))

print("MSE_test_5 =", MSE_test_5)
print("R2_test_5 =", R2_test_5) 
print("MAE_test_5 =", MAE_test_5) 
   
# Calculate median-average of metrics from 5 trials 
MSE_final=median(MSE_test_5)
print(MSE_final)
R2_final=median(R2_test_5)
print(R2_final)
MAE_final=median(MAE_test_5)
print(MAE_final)

# Calculate total time of algorithm running
end_time = timeit.default_timer()
hours, rem = divmod(end_time-start_time, 3600)
minutes, seconds = divmod(rem, 60)
print ("{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds))
