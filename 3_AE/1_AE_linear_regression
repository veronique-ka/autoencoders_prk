import timeit
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from keras.layers import Input, Dense
from keras.models import Model
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from statistics import median

# Set start time
start_time = timeit.default_timer()

# Load data
prk = pd.read_csv("https://raw.githubusercontent.com/veronique-ka/autoencoders_prk/master/prk_reord_bin.csv")

#Convert pandas dataframe to numpay array
p=np.array(prk)

# Initiate lists of metrics, based on 10 iterations (trials)
MSE_test_10 = list()
R2_test_10 = list()
MAE_test_10 =list()

for i in range(0,10):
    #split into train and test
    print("Partition number=", i)
    split = train_test_split(p, test_size=0.3)
    train=split[0]
    test=split[1]
    x_train=train[:,4:20]
    y_train=train[:,20]
    x_test=test[:,4:20]
    y_test=test[:,20]
    
    # normalize values between 0 and 1 and
    min_max=MinMaxScaler()
    x_train=min_max.fit_transform(x_train)
    x_test=min_max.fit_transform(x_test)
    
 
    #Vanilla AE (1 hidden layer)

    # Set the code size of the encoded representation  
    encoding_dim=3
    
    # Input placeholder
    input_sample = Input(shape=(16,))
    # Define AE architecture
    encoded = Dense(3, activation='sigmoid')(input_sample)
    decoded = Dense(16, activation='sigmoid')(encoded)
    autoencoder = Model(input_sample, decoded)
    # Return architecture of AE
    autoencoder.summary()
    
    # Compile autoencoder
    autoencoder.compile(optimizer='adam', loss='binary_crossentropy')
    
    # Train AE to reconstruct
    autoencoder.fit(x_train, x_train,
                    epochs=200,
                    batch_size=64,
                    shuffle=True,
                    validation_data=(x_test, x_test))
    
    # Get a separate model of Encoder
    encoder = Model(input_sample, encoded)
        
    # Get a code or encoded representation
    encoded_train=encoder.predict(x_train)
    encoded_test=encoder.predict(x_test)
    
    # Multiple regression model
    lr = LinearRegression(fit_intercept=True, normalize=False, copy_X=True, n_jobs=1)
    lr.fit(encoded_train, y_train)
    
    # Predict with regression model
    test_predictions = lr.predict(encoded_test)

    # Calculate Mean squarred error and append result to 10-dim array   
    MSE_test_10.append(mean_squared_error(y_test, test_predictions))
    print("MSE_test_10 =", MSE_test_10)
    
    # Calculate R2 and append result to 10-dim array   
    R2_test_10.append(r2_score(y_test, test_predictions))
    print("R2_test_10 =", R2_test_10)

    # Calculate Mean absolute error and append to 10-dim array
    MAE_test_10.append(mean_absolute_error(y_test,test_predictions))
    print("MAE_test_10", MAE_test_10)

#Calculate median of 10 trials
MSE_final=median(MSE_test_10)
R2_final=median(R2_test_10)
MAE_final=median(MAE_test_10)
print("MSE_final=", MSE_final)
print("R2_final=", R2_final)
print("MAE_final=", MAE_final)

#Set end time to calculate total time of code running
end_time = timeit.default_timer()
hours, rem = divmod(end_time-start_time, 3600)
minutes, seconds = divmod(rem, 60)
print ("{:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds))


