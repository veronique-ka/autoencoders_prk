import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from string import ascii_letters

#Load data
prk = pd.read_csv("https://raw.githubusercontent.com/veronique-ka/autoencoders_prk/master/prk_reord_bin.csv")

# Convert pandas Data frame into numpay array
p=np.array(prk)

#Dataset summary: number observation, missing values, data type
prk.info()

# del subject and motor_updrs columns
p=prk.drop("subject#",  axis=1)
p=p.drop("motor_UPDRS", axis=1) 

# Basic statistics: max-min, mean, st_dev, quartiles
prk.describe()

# Min-max
prk.min()
prk.max()

# 2-dim plot: each variable and target variable 
plt.scatter(prk["age"],prk["total_UPDRS"])
plt.scatter(prk["test_time"],prk["total_UPDRS"])
plt.scatter(prk["Jitter(%)"],prk["total_UPDRS"])
plt.scatter(prk["Jitter(Abs)"],prk["total_UPDRS"])
plt.scatter(prk["Jitter:RAP"],prk["total_UPDRS"])
plt.scatter(prk["Jitter:PPQ5"],prk["total_UPDRS"])
plt.scatter(prk["Jitter:DDP"],prk["total_UPDRS"])
plt.scatter(prk["Shimmer"],prk["total_UPDRS"])
plt.scatter(prk["Shimmer(dB)"],prk["total_UPDRS"])
plt.scatter(prk["Shimmer:APQ3"],prk["total_UPDRS"])
plt.scatter(prk["Shimmer:APQ5"],prk["total_UPDRS"])
plt.scatter(prk["Shimmer:APQ11"],prk["total_UPDRS"])
plt.scatter(prk["Shimmer:DDA"],prk["total_UPDRS"])
plt.scatter(prk["NHR"],prk["total_UPDRS"])
plt.scatter(prk["HNR"],prk["total_UPDRS"])
plt.scatter(prk["RPDE"],prk["total_UPDRS"])
plt.scatter(prk["DFA"],prk["total_UPDRS"])
plt.scatter(prk["PPE"],prk["total_UPDRS"])

# Visualize univariate distribution
sns.distplot(prk["age"])
sns.distplot(prk["age"], bins=1)
sns.distplot(prk["test_time"])
sns.distplot(prk["Jitter(%)"])
sns.distplot(prk["Jitter(Abs)"])
sns.distplot(prk["Jitter:RAP"])
sns.distplot(prk["Jitter:PPQ5"])
sns.distplot(prk["Jitter:DDP"])
sns.distplot(prk["Shimmer"])
sns.distplot(prk["Shimmer(dB)"])
sns.distplot(prk["Shimmer:APQ3"])
sns.distplot(prk["Shimmer:APQ5"])
sns.distplot(prk["Shimmer:APQ11"])
sns.distplot(prk["NHR"])
sns.distplot(prk["HNR"])
sns.distplot(prk["RPDE"])
sns.distplot(prk["DFA"])
sns.distplot(prk["PPE"])
sns.distplot(prk["total_UPDRS"])

# Count values of a binary variable
sex=sns.countplot(prk["sex"])

# Visualize box-plots to show the distribution of data to identify outliers.
sns.boxplot(prk["age"])
sns.boxplot(prk["test_time"])
sns.boxplot(prk["Jitter(%)"])
sns.boxplot(prk["Jitter(Abs)"])
sns.boxplot(prk["Jitter:RAP"])
sns.boxplot(prk["Jitter:PPQ5"])
sns.boxplot(prk["Jitter:DDP"])
sns.boxplot(prk["Shimmer"])
sns.boxplot(prk["Shimmer(dB)"])
sns.boxplot(prk["Shimmer:APQ3"])
sns.boxplot(prk["Shimmer:APQ5"])
sns.boxplot(prk["Shimmer:APQ11"])
sns.boxplot(prk["NHR"])
sns.boxplot(prk["HNR"])
sns.boxplot(prk["RPDE"])
sns.boxplot(prk["DFA"])
sns.boxplot(prk["PPE"])
sns.boxplot(prk["total_UPDRS"])

# Correlation matrixes

# Correlation matrix_Option1 (source: https://seaborn.pydata.org/examples/many_pairwise_correlations.html)

# Define style
sns.set(style="white")

# Compute the correlation matrix
corr = prk.corr()

# Generate a mask for the upper triangle
mask = np.zeros_like(corr, dtype=np.bool)
mask[np.triu_indices_from(mask)] = True

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(11, 9))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(220, 10, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})



# Correlation matrix_Option2
corr = prk.corr()
plt.subplots(figsize=(11, 9))
sns.heatmap(corr, 
            xticklabels=corr.columns.values,
            yticklabels=corr.columns.values)
            
            

# Correlation matrix_Option3
# Hinton corrrlation matrix (Source: http://python-for-multivariate-analysis.readthedocs.io/a_little_book_of_python_for_multivariate_analysis.html

def hinton(matrix, max_weight=None, ax=None):
    """Draw Hinton diagram for visualizing a weight matrix."""
    ax = ax if ax is not None else plt.gca()

    if not max_weight:
        max_weight = 2**np.ceil(np.log(np.abs(matrix).max())/np.log(2))

    ax.patch.set_facecolor('lightgray')
    ax.set_aspect('equal', 'box')
    ax.xaxis.set_major_locator(plt.NullLocator())
    ax.yaxis.set_major_locator(plt.NullLocator())

    for (x, y), w in np.ndenumerate(matrix):
        color = 'red' if w > 0 else 'blue'
        size = np.sqrt(np.abs(w))
        rect = plt.Rectangle([x - size / 2, y - size / 2], size, size,
                             facecolor=color, edgecolor=color)
        ax.add_patch(rect)

    nticks = matrix.shape[0]
    ax.xaxis.tick_top()
    ax.set_xticks(range(nticks))
    ax.set_xticklabels(list(matrix.columns), rotation=90)
    ax.set_yticks(range(nticks))
    ax.set_yticklabels(matrix.columns)
    ax.grid(False)

    ax.autoscale_view()
    ax.invert_yaxis()

figsize=(11, 9)
hinton(corr)



# Get Top-10 mostly correlated variables
def mosthighlycorrelated(p, numtoreport):
    # find the correlations
    corr = prk.corr()
    # set the correlations on the diagonal or lower triangle to zero,
    # so they will not be reported as the highest ones:
    corr *= np.tri(*corr.values.shape, k=-1).T
    # find the top n correlations
    corr = corr.stack()
    corr = corr.reindex(corr.abs().sort_values(ascending=False).index).reset_index()
    # assign human-friendly names
    corr.columns = ["FirstVariable", "SecondVariable", "Correlation"]
    return corr.head(numtoreport)
mosthighlycorrelated(p, 10)

